<# *** Script: adonis.ps1 *** Author: Atlantic Digital (MR) *** Purpose: This script is designed to retrive and format all Active Directory units in JSON Format and post to Adonis API. *** Components: ADOrganizationUnit, ADGroup, ADUser, ADComputer, ADGroupMember *** Details: This script collects all data in specific JSON format for Adonis to process, therefore any changes has to be validated in Adonis *** Set up Guide : https://portal.adhelp.co/a/solutions/articles/8000067087 *** ChangeLog: https://portal.adhelp.co/a/solutions/articles/8000064809 #> #-----------------VARIABLES FOR ADONIS POST------------------# $Url = "https://api.atlanticdigital.com.au/api/powershell/post" $global:hdrs = @{ } #----------------SCRIPT VERSION-------------------# $version = '1.0.6' #----------------GLOBAL VARIABLES----------------# $source = 'https://deploy.atlanticdigital.com.au/adonis/powershell' $global:path = Split-Path $script:MyInvocation.MyCommand.Path $global:scriptName = split-path $script:MyInvocation.MyCommand.Path -Leaf -Resolve $global:resources = "$path\resources" $global:moduleName = 'adonis.modules.psm1' $global:credentials = "$resources\credentials.xml" $global:tokenFile = "$resources\token.txt" $global:keyFile = "$resources\reg-back.reg" $global:clientCode = "$resources\code.xml" $global:defaultTo = @("ad.development@atlanticdigital.com.au", "operations@atlanticdigital.com.au") $global:defaultFrom = "Adonis " $global:logsDir = "$path\logs" $global:today = Get-Date $global:stamp = (get-date).ToString("ddMMyy HH:mm") $global:dateForFile = (Get-Date).ToString('dd-MM-yyyy') $global:logFile = "$logsDir\log_$dateForFile.html" [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12 $DNSRoot = $( Get-ADDomain ).DNSRoot #> Write-Host "SCRIPT INITIATED..." $writeback = "SCRIPT INITIATED..." Write-Host "Setting up modules" $writeback += " `n Setting up modules..." ##----------------------------------## ## IMPORTING MODULES ## ##----------------------------------## Write-Host "Downloading latest supporting module from '$source/$moduleName' to '$resources\$moduleName" $writeback += " `n Downloading latest supporting module from '$source/$moduleName' to '$resources\$moduleName" try { If (!(Test-Path -Path $resources)) { $writeback += " `n Local resource directory does not exist, creating..." New-Item -ItemType Directory -Force -Path $resources } Invoke-WebRequest -Uri "$source\$moduleName" -outfile "$resources\$moduleName" -UseBasicParsing; Start-Sleep -Seconds 2 Write-Host "Successfully downloaded, importing module." $writeback += " `n Successfully downloaded, importing module." Import-Module "$resources\$moduleName" -Verbose -Force $writeback += " `n Adonis module imported successfully." Write-Host "Adonis module imported successfully." } catch { Write-Host "Failed to download the latest copy of Adonis module." $writeback += " `n Failed to download the latest copy of Adonis module." if (Test-Path -Path "$resources\$moduleName") { Write-Host "Local copy found at '$resources\$moduleName', using local copy to import the Adonis module." $writeback += " `n Local copy found at '$resources\$moduleName', using local copy to import the Adonis module." Import-Module "$resources\$moduleName" -Verbose -Force Write-Host "Local copy of Adonis Module imported successfully." $writeback += " `n Local copy of Adonis Module imported successfully." } else { Write-Host "No local copy found at '$resources\$moduleName', submiting report and exiting with error: $( $_.Exception.Message )" $writeback += " `n No local copy found at '$resources\$moduleName', submiting report and exiting with error: $( $_.Exception.Message )" Send-MailMessage -To $defaultTo -From $defaultFrom -Subject "Adonis PosweShell Module Import Failure" -Body "Error occoured when downloading/importing module for adonis powershell. SERVER: '$env:computername' of DNS:'$DNSRoot' Error log: '$writeback" -SmtpServer atlanticdigital.mail.protection.outlook.com exit } } Write-Log -Text $writeback -Type "multi" -File $logFile Write-Log -Text "Importing Active Directory Module" -Type "info" -File $logFile Import-Module ActiveDirectory -ErrorAction SilentlyContinue if (!(Get-Module "ActiveDirectory" -ErrorAction SilentlyContinue)) { Write-Host "Error loading active directory module. Please check script permissions. Terminating Script." Write-Log -Text "Error loading active directory module. Please check script permissions. Terminating Script" -Type "error" -File $logFile Send-MailMessage -To $defaultTo -From $defaultFrom -Subject "Adonis PosweShell Module Import Failure" -Body "Error occoured when importing Active Directory Modules. SERVER: '$env:computername' of DNS:'$DNSRoot'" -Attachments $logFile -SmtpServer atlanticdigital.mail.protection.outlook.com exit } Write-Log -Text "Active Directory Module imported successfully." -Type "success" -File $logFile #------------------------------------------------# # Checking and retriving unique client code #------------------------------------------------# Write-Log -Text "CHECKING CLIENT CODE" -Type "header" -File $logFile try { if (Test-Path -Path $clientCode) { Write-Log -Text "Client code file found. Reading file." -Type "success" -File $logFile $global:cliConfig = Import-Clixml $clientCode } else { $clientValidate = $false Write-Log -Text "Client code file not found. Generating." -Type "info" -File $logFile Do { $code = Read-Host "Enter a unique Client Code for this Active Directory:" $HTTP_Request = [System.Net.WebRequest]::Create("$source/clients/$code/ad.config.ini") $HTTP_Response = $HTTP_Request.GetResponse() $HTTP_Status = [int]$HTTP_Response.StatusCode If (($HTTP_Status -eq 200) -and (($code -ne $null) -or ($code -ne ""))) { Write-Log -Text "Client code verified successfully" -Type "success" -File $logFile $clientValidate = $true } Else { Write-Log -Text "Client resources not found for client code '$code', Please check your client code and try again." -Type "error" -File $logFile } If ($HTTP_Response -ne $null) { $HTTP_Response.Close() } } While ($clientValidate -eq $false) $ConfigHash = @{ code = $code } $global:cliConfig = New-Object -TypeName PSObject -Property $ConfigHash $cliConfig | export-clixml $clientCode Write-Log -Text "Client code file generated successfully." -Type "success" -File $logFile } } catch { Write-Log -Text "Error occured saving/retriving client code from :'$clientCode'. Error: $( $_.Exception.Message )" -Type "error" -File $logFile Send-MailMessage -To $defaultTo -From $defaultFrom -Subject "Adonis Client Code Failure" -Body "Clinet code configuration failure for SERVER: '$env:computername' of DNS:'$DNSRoot'" -Attachments $logFile -SmtpServer atlanticdigital.mail.protection.outlook.com exit } ##----------------------------------## ## SET CLIENT CUSTOM SETTING ## ##----------------------------------## Write-Log -Text "CLIENT ACTIVE DIRECTORY CONFIGURATON CHECK" -Type "header" -File $logFile try { Write-Log -Text "Downloading/Updating latest configuration from :'$source/$( $cliConfig.code )/ad.config.ini'." -Type "info" -File $logFile Invoke-WebRequest -Uri "$source/clients/$( $cliConfig.code )/ad.config.ini" -outfile "$resources/ad.config.ini" -UseBasicParsing; Start-Sleep -Seconds 2 Write-Log -Text "Client Active Directory configuration generated/updated successfully." -Type "success" -File $logFile $global:adSetting = new-object -TypeName psobject $adConfigs = get-content "$resources\ad.config.ini" foreach ($adConfig in $adConfigs) { if (!($adConfig -like "#*")) { $adSetting | Add-Member -MemberType NoteProperty -Name $( $( $adConfig ).Split("=") | Select-Object -Index 0 ) -Value $( $( $adConfig ).Split("=") | Select-Object -Index 1 ) } } } catch { if (!(Test-Path -Path "$resources/ad.config.ini")) { $message = "Error occured downloading client active directory configuration from '$source/$( $cliConfig.code )/ad.config.ini' and local cpopy at '$resources/ad.config.ini' does not exist. Aborting. Error: $( $_.Exception.Message )" Write-Log -Text $message -Type "error" -File $logFile Send-MailMessage -To $defaultTo -From $defaultFrom -Subject "Adonis Client Code Failure" -Body "$message. client SERVER: '$env:computername' of DNS Root: '$DNSRoot'" -Attachments $logFile -SmtpServer atlanticdigital.mail.protection.outlook.com exit } else { $message = "Error occured updating client active directory configuration from '$source/$( $cliConfig.code )/ad.config.ini' and local copy at '$resources/ad.config.ini' found. Error: $( $_.Exception.Message )" Write-Log -Text $message -Type "warning" -File $logFile $global:adSetting = new-object -TypeName psobject $adConfigs = get-content "$resources\ad.config.ini" foreach ($adConfig in $adConfigs) { if (!($adConfig -like "#*")) { $adSetting | Add-Member -MemberType NoteProperty -Name $( $( $adConfig ).Split("=") | Select-Object -Index 0 ) -Value $( $( $adConfig ).Split("=") | Select-Object -Index 1 ) } } } } ##----------------------------------## ## CHECK & UPDATE CONFIGURATION ## ##----------------------------------## Write-Log -Text "CHECKING & UPDATING CONFIGURATION." -Type "header" -File $logFile try { Write-Log -Text "Downloading latest configuration from :'$source/config.ini'." -Type "info" -File $logFile Invoke-WebRequest -Uri "$source\config.ini" -outfile "$resources/config.ini" -UseBasicParsing; Start-Sleep -Seconds 2 $config = new-object -TypeName psobject $settings = get-content "$resources\config.ini" foreach ($setting in $settings) { if (!($setting -like "#*")) { $config | Add-Member -MemberType NoteProperty -Name $( $( $setting ).Split("=") | Select-Object -Index 0 ) -Value $( $( $setting ).Split("=") | Select-Object -Index 1 ) } } Write-Log -Text "Configuration download complete." -Type "info" -File $logFile } catch { Write-Log -Text "Error downloading configuration :'$source/config.ini'. Error: $( $_.Exception.Message )" -Type "error" -File $logFile Send-Debug -Subject "PowerShell error downloading configuration" -Message "Error occoured when downloading latest configuration for adonis powershell for client code '$( $cliConfig.code )' at SERVER: '$env:computername' of DNS Root: '$DNSRoot'" exit } ##----------------------------------## ## CHECK FOR ADONIS TOKEN ## ##----------------------------------## Write-Log -Text "CONFIGURING ADONIS TOKEN" -Type "header" -File $logFile Write-Log -Text "Checking for Adonis token at '$tokenFile'" -Type "info" -File $logFile try { If (!(Test-Path -Path $keyFile)) { Write-Log -Text "Adonis Token Encryption/Decryption key not found. Creating..." -Type "info" -File $logFile Get-Random -Count 32 -InputObject (0..255) | Out-File -FilePath $keyFile Write-Log -Text "Key file created successfully at '$keyFile'." -Type "success" -File $logFile } If (!(Test-Path -Path $tokenFile)) { Write-Log -Text "Adonis Token File not found. Creating ..." -Type "info" -File $logFile Read-Host -Prompt "Please enter Adonis Token Key " -AsSecureString | ConvertFrom-SecureString -Key (Get-Content -Path $keyFile) | Out-File $tokenFile Write-Log -Text "Token file created successfully." -Type "success" -File $logFile } $SecureString = ConvertTo-SecureString -Key (Get-Content $keyFile) -String (Get-Content $tokenFile) $Pointer = [Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecureString) $token = [Runtime.InteropServices.Marshal]::PtrToStringAuto($Pointer) $hdrs.Add("Authorization", "Bearer $token") Write-Log -Text "Adonis Token Setup Successfully." -Type "success" -File $logFile } catch { Write-Host "Error setting up Adonis token, exiting with error: $( $_.Exception.Message )" Write-Log -Text "Error setting up Adonis token, exiting with error: $( $_.Exception.Message )." -Type "error" -File $logFile Send-Debug -Subject "Adonis PosweShell Adonis Token Setup Failure" -Message "Error occoured when setting up Adonis Token for client code '$( $cliConfig.code )' at SERVER: '$env:computername' of DNS Root: '$DNSRoot'" exit } ##----------------------------------## ## CHECK & UPDATE SCRIPT ## ##----------------------------------## Write-Log -Text "CHECKING SCRIPT UPDATE." -Type "header" -File $logFile Write-Log -Text "Checking if new version of script available." -Type "info" -File $logFile try { if (($version) -ne ($config.version)) { Write-Log -Text "Update available, downloading new version." -Type "info" -File $logFile Invoke-WebRequest -Uri "$source\$scriptName" -outfile "$path\$scriptName" -UseBasicParsing; Start-Sleep -Seconds 2 Write-Log -Text "Script update from '$version' to '$( $config.version )'" -Type "info" -File $logFile &$path\$scriptName exit } else { Write-Log -Text "Script up to date. Current version: '$version'" -Type "info" -File $logFile } } catch { Write-Log -Text "Error updating script. Running local available version '$version'. Error: $( $_.Exception.Message )" -Type "error" -File $logFile } ##----------------------------------## ## CHECK & SCHEDULE TASK ## ##----------------------------------## Write-Log -Text "CHECKING FOR SCHEDULE TASK" -Type "header" -File $logFile try { $schedule = new-object -com Schedule.Service $schedule.connect() $tasks = $schedule.getfolder("\").gettasks(0) $exist = $false foreach ($task in ($tasks | select Name)) { if ($( $task.name ) -eq ($adSetting.task)) { $exist = $true break } } if (!$exist) { Write-Log -Text "Schedule Task does not exist, creating a new task for this script" -Type "info" -File $logFile #check if user credential file exisits if (![System.IO.File]::Exists($credentials)) { Write-Log -Text "User Credential is required to create task. Credential file not found. Generating." -Type "info" -File $logFile Get-Credential | Export-Clixml -Path $credentials; } $user = Get-Credential -Credential (Import-Clixml -Path $credentials) Write-Host $user.UserName $pass = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR($user.Password)) $action = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument "-ExecutionPolicy Bypass -file $( "$path\$scriptName" )" $trigger = New-ScheduledTaskTrigger -Daily -At ($adSetting.time) $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable -DontStopOnIdleEnd -WakeToRun Register-ScheduledTask -TaskName $( $adSetting.task ) -Description "This task is schedule daily to send active directory reports to adonis" -Action $action -Trigger $trigger -Settings $settings -User $user.UserName -Password $pass -Force Write-Log -Text "Schedule task '$( $adSetting.task )' has been created Successfully to run at '$( $adSetting.time )' daily" -Type "success" -File $logFile if (Test-Path -Path $credentials) { Remove-Item $credentials Write-Log -Text "Credential file deleted." -Type "success" -File $logFile } } else { Write-Log -Text "Schedule task exist." -Type "info" -File $logFile } } catch { $message = "Error Scheduling task '$( $adSetting.task )' to run at '$( $adSetting.time )' daily for client code '$( $cliConfig.code )' at SERVER: '$env:computername' of DNS Root: '$DNSRoot'. Error: $( $_.Exception.Message )" Write-Log -Text $message -Type "error" -File $logFile Send-Debug -Subject "Scheduling Task Failure" -Message $message exit } ##------------------------------------------------------------------------## # REPORTING TO ADONIS ##------------------------------------------------------------------------## Write-Log -Text "GENERATING ACTIVE DIRECTORY DATA FOR ADONIS" -Type "header" -File $logFile #EXECUTION STARTS HERE try { $return = New-Object -TypeName PSObject $allAdoUnits = Get-AllAdoUnits $allOthers = Get-AllOtherObjects #Add all elements groups to return variable $return | Add-Member -MemberType NoteProperty -Name 'ADOUnits' -Value $allAdoUnits $return | Add-Member -MemberType NoteProperty -Name 'Others' -Value $allOthers $return | Add-Member -MemberType NoteProperty -Name 'client_code' -Value $( $cliConfig.code ) $return | Add-Member -MemberType NoteProperty -Name 'dns_root' -Value (Get-ADDomain).DNSRoot #Convert the return data to Json Format $body = $return | ConvertTo-Json -Compress -depth 100 #test output by outputing as txt file #$body | Out-File -FilePath $( "$path\output.txt" ) #Initiate post request to the Adonis APi with variable Invoke-RestMethod -Uri $url -Method Post -Body $body -ContentType 'application/json' -Headers $hdrs Write-Log -Text "Successfully submitted data to Adonis for processing." -Type "success" -File $logFile } catch { Write-Log -Text "Error posting Active Directory data to Adonis. Error: $( $_.Exception.Message )" -Type "error" -File $logFile Send-MailMessage -To $defaultTo -From $adSetting.emailFrom -Cc $adSetting.emailCc -Subject "Adonis PosweShell Script POST FAILURE" -Body "Error occoured when sending file to Adonis. SERVER: '$env:computername' of DNS:'$DNSRoot'" -Attachments $logFile -SmtpServer $adSetting.emailSMTP #$message = "Error encountered while fetching all Active Directory Data for for client code '$( $cliConfig.code )' at SERVER: '$env:computername' of DNS Root: '$DNSRoot' .Error: $( $_.Exception.Message )" #Send-Debug -Subject "Adonis Active Directory data collection failure" -Message $message } #END OF SCRIPT Exit 200